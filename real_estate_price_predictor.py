# -*- coding: utf-8 -*-
"""Real Estate Price Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IypQ842bTeYiN1EBul5FBcn4fthddBWs

# **Real Estate Price Predictor**
"""

import pandas as pd

import matplotlib.pyplot as plt

housing = pd.read_csv("data3.CSV")

housing.head()

housing.info()

housing["CHAS"].value_counts()

housing.describe()

housing.shape

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

housing.hist(bins=50 , figsize=(20,15))
plt.show()

"""# Train Test Splitting"""

import numpy as np
import sklearn

#def split_train_test(data , test_ratio):
  
 # np.random.seed(42)
  #shuffled = np.random.permutation(len(data))
  #print(shuffled)
  #test_size_data = int(len(data)*test_ratio)
  #test_indices = shuffled[:test_size_data]
  #train_indices = shuffled[test_size_data:]
  #return data.iloc[train_indices] , data.iloc[test_indices]

#train_set , test_set = split_train_test(housing , 0.2)
#print(f"Rows in train set : {len(train_set)} and Rows in test set : {len(test_set)}")

from sklearn.model_selection import train_test_split
#train_test_split?
train_set , test_set = train_test_split(housing , test_size = 0.2 , random_state = 42)
print(f"Rows in train set : {len(train_set)} and Rows in test set : {len(test_set)}")

from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1 , test_size = 0.2 , random_state = 42)
for train_index , test_index in split.split(housing , housing['CHAS']):
  strat_train_set = housing.loc[train_index]
  strat_test_set = housing.loc[test_index]

strat_test_set.describe()
strat_test_set['CHAS'].value_counts()

"""## LOOKING FOR CORRELATIONS"""

corr_matrix = housing.corr()

corr_matrix['MEDV'].sort_values(ascending = False)
# 1 is for strong positive correlation
#if one value is increasing then other will also increase
# -ve is for strong negative value correlation
# if one value is increasing then other will decrease

from pandas.plotting import scatter_matrix
attributes = ["MEDV" , "RM" , "ZN" , "LSTAT"] 
scatter_matrix(housing[attributes] , figsize = (12,8))

housing.plot(kind = "scatter" , x = "RM" , y = "MEDV" , alpha = 0.5)
plt.show()

"""## Trying out attributes combination"""

#housing["TAXRM"] = housing["TAX"]/housing["RM"]

housing.head()

corr_matrix = housing.corr()
corr_matrix['MEDV'].sort_values(ascending = False)

#housing.plot(kind = "scatter" , x = "TAXRM" , y = "MEDV" , alpha = 0.5)
#plt.show()

## Missing Attributes

a=housing.dropna(subset = ["RM"])
a.shape

housing = strat_train_set.drop("MEDV" , axis=1)
housing_labels = strat_train_set["MEDV"].copy()

"""## Creating Pipeline"""

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.impute import SimpleImputer


my_pipeline = Pipeline([
  ('imputer' , SimpleImputer(strategy = "median")),
  ('std_scalar' , StandardScaler()),
])

housing.shape

print(train_set.shape)
print(test_set.shape)

housing_num_tr = my_pipeline.fit_transform(housing)
print(housing_num_tr)

housing_num_tr.shape

"""## Selection Of Model"""

from sklearn.linear_model import  LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
model = RandomForestRegressor()
model.fit(housing_num_tr , housing_labels)

some_data = housing.iloc[:5]
some_labels = housing_labels.iloc[:5]

prepared_data = my_pipeline.transform(some_data)

model.predict(prepared_data)

list(some_labels)

from sklearn.metrics import mean_squared_error
housing_predictions = model.predict(housing_num_tr)
lin_mse = mean_squared_error(housing_labels , housing_predictions)
lin_rmse = np.sqrt(lin_mse)
lin_rmse

##using better evaluation technique - cross validation

from sklearn.model_selection import cross_val_score

scores = cross_val_score(model , housing_num_tr , housing_labels , scoring="neg_mean_squared_error" , cv=10)
rmse_scores = np.sqrt(-scores)

rmse_scores

def Print_score(scores):
    print("scores : " , scores)
    print("Mean : " , scores.mean())
    print("Standard deviation : " , scores.std())

Print_score(rmse_scores)

from joblib import dump , load
dump(model , "RealEstate.joblib")

## TEsting of Data


X_test = strat_test_set.drop("MEDV" , axis = 1)
Y_test = strat_test_set["MEDV"].copy(0)
X_test_prepared = my_pipeline.transform(X_test)
final_predictions = model.predict(X_test_prepared)
final_mse = mean_squared_error(Y_test , final_predictions)
final_rmse = np.sqrt(final_mse)

print(final_predictions , list(Y_test))


final_rmse